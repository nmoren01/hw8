
.section init
        .temps r6, r7

.section text
        print_line:
                push r1 on stack r2
                push r3 on stack r2
                push r4 on stack r2

                r3 := m[r0][r2 + 3]

                goto p_loop
        
        p_loop:
                if (r3 == val_stack) goto p_end using r5

                r4 := m[r0][r3]

                push r4 on stack r2

                goto p_val linking r1 

                pop r3 off stack r2

                r3 := r3 + 1

                goto p_loop



        p_end: 
                r1 := m[r0][r2 + 3]

                pop r4 off stack r2
                pop r3 off stack r2
                pop r5 off stack r2

                goto r5 

        p_val:
                
                push r1 on stack r2 
                push r3 on stack r2 
                push r4 on stack r2 // TODO r4 is now third on stack

                output ">>> "

                r4 := m[r0][r2 + 3] // get 

                r3 := 0 //TODO figure out why

                if (r4 == 0) goto print_zero 
                if (r4 <s 0) goto print_neg using r5
                //if (r4 == 0x80000000) goto print_most_neg using r5 
                // TODO: fix this 
                //TODO: ask if we can use hex 
                
                //from here down assumes it is positive
                goto print_pos

        p_val_exit:
                output "\n"
                pop r4 off stack r2
                pop r3 off stack r2
                pop r5 off stack r2

                goto r5

        print_zero:
                // handle special case value to print has leading 0
                output "0"
                goto p_val_exit

        print_neg:
                // handle special case 
                output '-'

                //convert to positive equivalent num
                r4 := -r4
                goto print_pos

        print_most_neg:
                // value is 0x800000000
                output "2147483648"

                goto p_val_exit

        print_pos:
                // value is positive
                r3 := r3 + 1
                r5 := r4

                r4 := r4 / 10

                // r4 == 0 -> it was a single digit so print
                if (r4 == 0) goto print_dig 

                r5 := r5 mod 10 // get least sig digit
                push r5 on stack r2 

                goto print_pos

        print_dig:
                push r5 on stack r2

                goto print_dig_loop
        
        print_dig_loop:
                if (r3 == 0) goto p_val_exit

                pop r4 off stack r2

                output r4 + '0'

                r3 := r3 - 1

                goto print_dig_loop






                

